//creates the random tag for the shortURL
const randomNumberGenerator = function() {
  let random = '';
  const characterList ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwyxz0123456789';
  for (var i = 0; i < 6; i++) {
    random += characterList.charAt(
      Math.floor(Math.random() * characterList.length)
    );
  }
  return random;
};

const usersDatabase = {};
let urlDatabase = {};

//function to check if the email is present in the userDatabase
function doesEmailExist(email) {
  for(var key in usersDatabase) {
    if(usersDatabase[key].email === email) {
      return key;
    }
  }
}

//these functions render pages

exports.urlListPage = function(request, response) {
  let userID = usersDatabase[request.session.user_id];
  if(userID) {
    let templateVar = {
      user: userID,
      urls: urlDatabase
    };
    response.render('urls_index', templateVar);
  } else {
    response.redirect('/login');
  }
};

//used for registration page, uses if statements to ensure it is filled out properly
//uses bcrypt and session cookies for enhances security
exports.addUserToUserDatabase = function(request, response) {
  const id = randomNumberGenerator();
  const bcrypt = require('bcrypt');
  let email = request.body.email;
  let password = request.body.password;
  if (doesEmailExist(email)) {
    const templateVar = {
      error: 'email already in use, please use a different email.'
    };
    response.render('user_registration', templateVar);
  } else if (email && password) {
    usersDatabase[id]= {
      id: id,
      email: email,
      password: bcrypt.hashSync(password, 10)
    };
    request.session.user_id = id;
    response.redirect('/urls');
  } else {
    const templateVar = {
      error: 'email and password are required to register.'
    };
    response.render('user_registration', templateVar);
  }
};

exports.shortUrlPage = function (request, response) {
  let userID =  usersDatabase[request.session.user_id];
  const id = request.params.id;
  if(userID) {
    let templateVar = {
      user: userID,
      shortURL: id
    };
    response.render('urls_show', templateVar);
  } else {
    response.redirect('/login');
  }
};

exports.homePage = function(request, response) {
  let userID = usersDatabase[request.session.user_id];
  const templateVar = {
    user: userID,
    urls: urlDatabase
  };
  response.render('homePage', templateVar);
};

exports.loginPage = function (request, response) {
  let templateVar = {
    error: undefined
  };
  response.render('login', templateVar);
};

exports.registerUser = function (request, response) {
  let templateVar = {
    error: undefined
  };
  response.render('user_registration', templateVar);
};

exports.urlNewEntry = function (request, response) {
  let userID = usersDatabase[request.session.user_id];
  if(userID) {
    let templateVar = {
      user: userID
    };
    response.render('urls_new', templateVar);
  } else {
    response.redirect('/login');
  }
};

//these functions redirect to a new page

exports.addUrlToListPage = function (request, response) {
  let userID = usersDatabase[request.session.user_id];
  urlDatabase[randomNumberGenerator()] = {
    url: request.body.longURL,
    user: userID.id
  };
  response.redirect('/urls');
};

exports.urlDelete = function (request, response) {
  const id = request.params.id;
  delete urlDatabase[id];
  response.redirect('/urls');
};

exports.updateLongUrl = function (request, response) {
  let id = request.params.id;
  urlDatabase[id].url = request.body.longURL;
  response.redirect('/urls');
};

exports.logout = function(request, response) {
  response.redirect('/login');
};

exports.userLogin = function (request, response) {
  const bcrypt = require('bcrypt');
  let email = request.body.email;
  let password = request.body.password;
  const id = doesEmailExist(email);
  if (id && bcrypt.compareSync(password, usersDatabase[id].password)) {
    request.session.user_id = id;
    response.redirect('/urls/new');
  } else {
    response.redirect('/register');
  }
};